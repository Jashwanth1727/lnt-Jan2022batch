a. Inheritance
	- single-level
	- multi-level
	- multiple (not supprted in C#)
b. polymorphism


Professor	
	- name
	- subject
	- department
	- experience
	- books published
Student
	- name
	- subjects
	- department
	- marks

class Animal{ public void MakeNoise(){}}
class Bird{ public void MakeNoise(){//code}}
class Dog{public void MakeNoise(){}}
class Cat{}

polymorphism: same name, different form

A. compile time polymorphism: during compilation, compiler connects the caller line with the appropriate function to call (which function will be called is decided during compilation time). Only one class is invloved, means, in single class, multiple methods or constructors with the same name will exist

example: function overloading, constructor overloading, operator overloading

i. function (also constructor) overloading: function (including constructor) with same name but diffence in the arguments
	- No of parameters/arguments
	- arguments with different data types
	- order of the arguments

ii. operator overloading: same operator working on different operands and do different kind of jobs (adding ,concatenting etc.)
example: 
int a = 10;
int b = 20;
int res = a + b; //+ operator is adding two integers

string firstName = "Sunil";
string lastName = "Kumar";
string fullName = firstName+lastName; //+ operator is concatenating two strings

B. Runtime/Dynamic Polymorphism (Note: this involves inheritance, means minimum two classes are involved, one base and another child): which function will be called is decided during runt time, when the code is executed

Function overriding:
	base class method is overriden in the child class (not changing the signature of the inherited base class method, rather changing the code inside)
	- declare the base class method with 'virtual' keyword
	- declare the same method in the child class with 'override' keyword
Now, always the child class method will be invoked, with the object of the child class
you can call base class method, using 'base' keyword from the child class method


Situation:
many child classes are there inheriting from base class and overriding method with complete different code. so, what to write in the base class virtual method?

abstract DataAccess //abstract class: class having at least one abstract member (property and/or function)
	abstract void GetData(); //abstract function: function without any code/implementation
	abstract string Path { set; get; }//abstract property: property without any code/implementation fo set and get

FileDataAccess inherits from DataAccess //the child class MUST implement the abstract members (property and/or function)
	string filePath;
	override void GetData() { //code to fetch data from Text file}
	override string Path { set=>filePath = value; get=> filePath;}

DatabaseDataAccess inherits from DataAccess
	string dbConnection;
	override void GetData() { //code to fetch data from SQL Server database}
	override string Path { set=>dbConnection = value; get=> dbConnection;}

XmlDataAccess inherits from DataAccess
	string xmlFileLocation;
	override void GetData() { //code to fetch data from XML file}
	override string Path { set=>xmlFileLocation = value; get=> xmlFileLocation;}

1, anil, 1000
2, sunil, 2000

lntdb
	employees: id, name, salary

select * from employees

App name: OutstandingPersonApp


Person
	- name
	- bool IsOutstanding(){//code ??????}

Professor ( has published more than 5 books)
	- string name
	- int bookspublished

	- override bool IsOutstanding()
	  { 
		if(bookspublished>5) return true; else false;
	  }

Student ( has got more than 85 marks)
	- string name
	- double marks

	- override bool IsOutstanding(){ if(marks>85) return true; else false;}

override and overwrite are different

int x = 10;
x = 20;

abstract class: 
class having at least one abstract member (property and/or function)
You can't create object of abstarct class
class can have other non-abstract members (constructors, data members, other methods, other properties)
when you inherit from abstract clas, the child class MUST implement all the abstract members of the base class. otherwise the child class will become abstract class (you have to declare the child class with abstract keyword)

interface: 
a. pure abstract class
b. everything is abstract: method and/or property
c. to declare interface: use interface keyword followed by interface name, starting with uppercase I
d. to declare interface members
rules:
do not use any access specifier: by default any member is public
do not use abstract keyword: by default any member is abstract
do not declare any static member inside interface
do not declare any data member inside interface
do not write any constructor inside interface
e. object of interface can not be created

implement the interface in a class:
rules:
implement all members of the interface
do not use override keyword
if you do not imlement all the members, the class becomes abstract (declare the class with abstract). please write the method inside the class with abstract keyword





	


