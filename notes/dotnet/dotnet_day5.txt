a. Inheritance
	- single-level
	- multi-level
	- multiple (not supprted in C#)
b. polymorphism


Professor	
	- name
	- subject
	- department
	- experience
	- books published
Student
	- name
	- subjects
	- department
	- marks

class Animal{ public void MakeNoise(){}}
class Bird{ public void MakeNoise(){//code}}
class Dog{public void MakeNoise(){}}
class Cat{}

polymorphism: same name, different form

A. compile time polymorphism: during compilation, compiler connects the caller line with the appropriate function to call (which function will be called is decided during compilation time). Only one class is invloved, means, in single class, multiple methods or constructors with the same name will exist

example: function overloading, constructor overloading, operator overloading

i. function (also constructor) overloading: function (including constructor) with same name but diffence in the arguments
	- No of parameters/arguments
	- arguments with different data types
	- order of the arguments

ii. operator overloading: same operator working on different operands and do different kind of jobs (adding ,concatenting etc.)
example: 
int a = 10;
int b = 20;
int res = a + b; //+ operator is adding two integers

string firstName = "Sunil";
string lastName = "Kumar";
string fullName = firstName+lastName; //+ operator is concatenating two strings

B. Runtime/Dynamic Polymorphism (Note: this involves inheritance, means minimum two classes are involved, one base and another child): which function will be called is decided during runt time, when the code is executed

Function overriding:
	base class method is overriden in the child class (not changing the signature of the inherited base class method, rather changing the code inside)
	- declare the base class method with 'virtual' keyword
	- declare the same method in the child class with 'override' keyword
Now, always the child class method will be invoked, with the object of the child class
you can call base class method, using 'base' keyword from the child class method


	


