1. model binding
2. HTML helper
3. Layout

ViewResult: when you need to return a view (HTML)
JsonResult: when you need to return data in JSON format
RedirectResult: when you want to redirect an user from the requested route to some other route
NotFoundObjectResult: when want to return a result indicating the requested data/object/value not found

class ProductsController:Controller{
public ViewResult/IActionResult GetRecords()
{
    return this.View();
}
public IActionResult GetData(int id)
{
   if(condition is true)
   {
	//you return an HTML (ViewResult)
	IActionResult vrObject = null;
        vrObject = this.View();
	return vrObject;
   }
   else
   {
        //you return not found (NotFoundObjectResult)
	IActionResult nfObject = this.NotFound();
	return nfObject;
   }
}
}
class Controller
{
    public ViewResult View()
    {
       return new ViewResult();
    }
    public NotFoundObjectResult NotFound()
    {
       return new NotFoundObjectResult();
    }
}
class ViewResult: IActionResult{}
class NotFoundObjectResult: IActionResult{}

class Person{}
class Student:Person{}
class Professor:Person{}

Student s1 = new Student();
Professor p1 = new Professor();

Person[] people = new Person[2];
people[0]=s1;
people[1]=p1;


delegate 

class A
{
    public void M1(){}
}

class Program
{
   static void Call()
   {
   }   

   static void Main()
   {
   }
}

OOP
delegate
Generic method, class, interface, delegate
anonymous method
lambda expression
LINQ

Where()=> method to filter any collection
the method accepts an argument
the type pf argument is Func<in T, out TResult> delegate.
create an object of a delegate which will refer to a method that can be used to filter the collection

iterate through the colletion of numbers
declare a variable which can store one number at a time
check the number is even or not
if even, then add the number in a new collection

(int N) => N % 2 == 0

public bool IsEven(int N)
{
   if(N%2==0) return true; else return false;
}

using System;
using System.Linq;
/*
class A
{
   public bool IsEven(int N)
   {
     if(N%2==0) return true; else return false;
   }
}
*/
class Program
{   
   static void Main()
   {
      List<int> numbers = new List<int>{1,2,3,4,5,6,7,8,9,0};
      //Func<int,bool> evenFilterLogic = new Func<int,bool>(new A().IsEven);
        //anonymous method
        /*
	Func<int,bool> evenFilterLogic = delegate(int N)
   	{
     		if(N%2==0) return true; else return false;
   	};
	*/
	//anonymous method wriiten using Lambda expression (the expression to create anonymous method)
	//Func<int,bool> evenFilterLogic = (N)=>N%2==0;
        //numbers.Where(evenFilterLogic);
	numbers.Where((N)=>N%2==0);
        allProducts.Where((Product p)=>p.ProductId==arg);
   }
}


I do not want to use Sample data
create a database
create a table "products" 
columns: productid [PK] int, productname varchar(50), price decimal(18,2), description varchar(max)
stored procedures: 
a. getting all products, 
b. get a product for given id, 
c. add a product record in the table


ADO.NET: ActiveX Data Object
-------------------------------------------------------------------------------------
data access technology in .NET framework/.NET Core framework
It helps you to access data/manipulate data from any data source (Sql Server, Oracle, MySql etc.)

Connected Approach: Throughout the database operation you are connected to the database. Here you do any operation directly against the table.

Disconnected Approach: Get connected to the database, fetch all the records from table(s) and disconnect from database. Then, store the data temporarily in the application, manipuate that data, and then update the changes again to the database, by connecting to the database once more and then immediately disconnect. Here your manipulation of data happens in the data temporarily saved in your application. Then you just update those changes in the database later any point of time.

ADO.NET Object Model:

A. Data Provider: collection of built-in classes, interfaces, enums etc. for interacting with a database
----------------------------------------------------------------------------------------------------
Specific data provoders:
SQL Server Data Provider: set of built-in classes, interfaces, enums etc. for interacting with SQL Server
Namespace: System.Data.SqlClient
Example: SqlConnection, SqlCommand, SqlDataReader (connected approach), SqlDataAdapter (disconnected approach), SqlParameter etc.

Oracle Data Provider: set of built-in classes, interfaces, enums etc. for interacting with Oracle
Namespace: System.Data.OracleClient
Example: OracleConnection, OracleCommand, OracleDataReader (connected approach), OracleDataAdapter (disconnected approach), OracleParameter  etc.

Jet Database Data Provider: set of built-in classes, interfaces, enums etc. for interacting with Jet databases like MS Access
Namespace: System.Data.OleDb (OLE => Object Linking and Embedding)
Example: OleDbConnection, OleDbCommand, OleDbDataReader (connected approach), OleDbDataAdapter (disconnected approach), OleDbParameter  etc.

Common Data Provider: set of common built-in classes, interfaces, enums etc. for interacting with any database, including SQL Server, Oracle, MS Access or any other database
Namespace: System.Data.Odbc (ODBC => Open Database Connectivity)
Example: OdbcConnection, OdbcCommand, OdbcDataReader (connected approach), OdbcDataAdapter (disconnected approach), OdbcParameter  etc.

B. Data Consumer: which consumes the data (stores data). It does not depend on where you are accessing the data from. These built-in types just helps ypu to store data in disconnected/connected mode.
------------------------------------------------------------------------------------------
Namespace: System.Data
Example: DataSet, DataTable, DataColumn, DataRow, DataRelation etc.


System.Data also contains following interfaces:
IDbConnection,    IDbCommand,    IDbDataReader,    IDbDataAdapter,   IDbParameter etc.

System.Data.Common namespace contains following abstract classes
DbConnection,     DbCommand,     DbDataReader,     DbDataAdapter,    DbParameter etc.

System.Data.SqlClient
SqlConnection,    SqlCommand,    SqlDataReader,    SqlDataAdapter,    SqlParameter etc.
OracleConnection, OracleCommand, OracleDataReader, OracleDataAdapter, OracleParameter etc.

to execute query use following methods of any command class:
------------------------------------------------------------------------
NON-SELECT:
int ExecuteNonQuery() => use it to execute any non-select query (insert, update, delete, alter, create, drop etc.)

SELECT:
object ExecuteScalar() => use it to execute select query, which returns just a single value 
select count(*) from <table-name>
select <col-name> from <table-name> where <pk-column>=value

IDataReader ExecuteReader() => use it to execute select query, which returns multiple values (many rows, a single row with multiple column value). the method stores the result set in an object of data reader class (SqlDataReader, OrcaleDataReader etc.) after executing the query. the method retuns that data reader object containing result set.

XML:
ExecuteXmlReader() => use it for XML data from XML file. Like ExcuteReader, it creates data reader object and stores all the XML data in that. the method returns the reader object containing the XML data.

